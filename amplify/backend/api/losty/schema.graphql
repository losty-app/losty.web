type Requester @model @auth(rules: [{ allow: private }]) {
  id: ID!
  firstName: String!
  lastName: String!
  age: Int
  state: String @default(value: "ישראל")
  gender: String
  tel: String!
  place: AWSJSON
  lastSeen: AWSDateTime
  associationId: ID! @index(name: "byAssociation")
  uriImage: String
    @default(
      value: "https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg"
    )
  expoPushToken: String
  providers: [Provider] @manyToMany(relationName: "RequesterProvider")
}

enum ProviderType {
  REGULAR
  ADMIN
}

type Provider @model @auth(rules: [{ allow: private }]) {
  id: ID!
  providerType: ProviderType @default(value: "REGULAR")
  firstName: String!
  lastName: String!
  age: Int
  state: String @default(value: "ישראל")
  gender: String
  tel: String!
  place: AWSJSON
  lastSeen: AWSDateTime
  associationId: ID! @index(name: "byAssociation")
  uriImage: String
    @default(
      value: "https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg"
    )
  expoPushToken: String
  requesters: [Requester] @manyToMany(relationName: "RequesterProvider")
}

enum SosEventStatus {
  PENDING
  FINISHED
}

type SosEvent @model @auth(rules: [{ allow: private }]) {
  id: ID!
  status: SosEventStatus!
  requesterId: ID!
  providerResponses: [ProviderResponse]
    @hasMany(indexName: "bySosEvent", fields: ["id"])
  place: AWSJSON
}

enum ProviderResponseStatus {
  UNSEEN
  SEEN
  APPROVED_OUT
  APPROVED_DEST
}

type ProviderResponse @model @auth(rules: [{ allow: private }]) {
  id: ID!
  sosEventId: ID! @index(name: "bySosEvent")
  provider: Provider! @hasOne
  status: ProviderResponseStatus!
}

type Association @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String
  uriImage: String
  providers: [Provider] @hasMany(indexName: "byAssociation", fields: ["id"])
  requesters: [Requester] @hasMany(indexName: "byAssociation", fields: ["id"])
}

enum InvitationResponseStatus {
  PENDING
  DECLINED
  APPROVED
}

type Invitation @model @auth(rules: [{ allow: private }]) {
  id: ID!
  invitationStatus: InvitationResponseStatus @default(value: "PENDING")
  providerId: ID!
  requesterId: ID!
}
